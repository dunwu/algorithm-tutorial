(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{383:function(e,r,t){"use strict";t.r(r);var a=t(15),n=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"数据结构-树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-树"}},[e._v("#")]),e._v(" 数据结构 - 树")]),e._v(" "),r("h2",{attrs:{id:"二叉树经典题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树经典题"}},[e._v("#")]),e._v(" 二叉树经典题")]),e._v(" "),r("h3",{attrs:{id:"深度优先搜索-dfs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索-dfs"}},[e._v("#")]),e._v(" 深度优先搜索（DFS）")]),e._v(" "),r("p",[e._v("在这个策略中，我们采用 深度 作为优先级，以便从跟开始一直到达某个确定的叶子，然后再返回到达另一个分支。深度优先搜索策略又可以根据根节点、左孩子和右孩子的相对顺序被细分为"),r("strong",[e._v("先序遍历")]),e._v("，"),r("strong",[e._v("中序遍历")]),e._v("和"),r("strong",[e._v("后序遍历")]),e._v("。")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的前序遍历"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的中序遍历"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的后序遍历"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"宽度优先搜索-bfs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#宽度优先搜索-bfs"}},[e._v("#")]),e._v(" 宽度优先搜索（BFS）")]),e._v(" "),r("p",[e._v("我们按照高度顺序一层一层的访问整棵树，高层次的节点将会比低层次的节点先被访问到。")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的层序遍历"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"二叉树和递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树和递归"}},[e._v("#")]),e._v(" 二叉树和递归")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("二叉树的最大深度"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("对称二叉树"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"}},[e._v("路径总和"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),r("ul",[r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("maximum-depth-of-binary-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("balanced-binary-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary-tree-maximum-path-sum"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("lowest-common-ancestor-of-a-binary-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary-tree-level-order-traversal"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary-tree-level-order-traversal-ii"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary-tree-zigzag-level-order-traversal"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("validate-binary-search-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("insert-into-a-binary-search-tree"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"二叉搜索树经典题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树经典题"}},[e._v("#")]),e._v(" 二叉搜索树经典题")]),e._v(" "),r("ul",[r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("validate-binary-search-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("insert-into-a-binary-search-tree"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/delete-node-in-a-bst/",target:"_blank",rel:"noopener noreferrer"}},[e._v("delete-node-in-a-bst"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("[ ] "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/balanced-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[e._v("balanced-binary-tree"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=n.exports}}]);