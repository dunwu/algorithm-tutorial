(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{382:function(t,r,a){"use strict";a.r(r);var e=a(15),_=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"算法思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法思路"}},[t._v("#")]),t._v(" 算法思路")]),t._v(" "),r("h2",{attrs:{id:"递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),r("h3",{attrs:{id:"使用递归的条件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用递归的条件"}},[t._v("#")]),t._v(" 使用递归的条件")]),t._v(" "),r("p",[t._v("递归需要满足的三个条件")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("一个问题的解可以分解为几个子问题的解")])]),t._v(" "),r("li",[r("strong",[t._v("这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样")])]),t._v(" "),r("li",[r("strong",[t._v("存在递归终止条件")])])]),t._v(" "),r("h3",{attrs:{id:"递归代码要警惕堆栈溢出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#递归代码要警惕堆栈溢出"}},[t._v("#")]),t._v(" 递归代码要警惕堆栈溢出")]),t._v(" "),r("p",[t._v("函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。系统栈或者虚拟机栈空间一般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。")]),t._v(" "),r("p",[t._v("那么，如何避免出现堆栈溢出呢？")]),t._v(" "),r("p",[t._v("我们可以通过在代码中限制递归调用的最大深度的方式来解决这个问题")]),t._v(" "),r("h2",{attrs:{id:"贪心算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),r("h3",{attrs:{id:"贪心算法思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法思路"}},[t._v("#")]),t._v(" 贪心算法思路")]),t._v(" "),r("p",[t._v("贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择，就能得到问题的答案。贪心算法需要充分挖掘题目中条件，没有固定的模式，解决有贪心算法需要一定的直觉和经验。")]),t._v(" "),r("p",[t._v("贪心算法"),r("strong",[t._v("不是对所有问题都能得到整体最优解")]),t._v("。能使用贪心算法解决的问题具有「贪心选择性质」。「贪心选择性质」严格意义上需要数学证明。能使用贪心算法解决的问题必须具备「无后效性」，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。")]),t._v(" "),r("h3",{attrs:{id:"贪心算法的应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法的应用"}},[t._v("#")]),t._v(" 贪心算法的应用")]),t._v(" "),r("p",[t._v("霍夫曼编码（Huffman Coding）")]),t._v(" "),r("p",[t._v("Prim 和 Kruskal 最小生成树算法")]),t._v(" "),r("p",[t._v("Dijkstra 单源最短路径算法")]),t._v(" "),r("h2",{attrs:{id:"分治算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[t._v("#")]),t._v(" 分治算法")]),t._v(" "),r("p",[t._v("分治算法的核心就是分而治之，也就是将原问题划分成 n 个规模较小，并且结构与原问题相似的子问题，分别解决这些子问题，然后再合并其结果，得到原问题的解。")]),t._v(" "),r("p",[r("strong",[t._v("分治算法是一种处理问题的思想，递归是一种编程技巧")]),t._v("。分治算法一般都比较适合用递归来实现。分治算法的递归实现中，每一层递归都会涉及这样三个操作：")]),t._v(" "),r("ul",[r("li",[t._v("分解：将原问题分解成一系列子问题；")]),t._v(" "),r("li",[t._v("解决：递归地求解各个子问题，若子问题足够小，则直接求解；")]),t._v(" "),r("li",[t._v("合并：将子问题的结果合并成原问题。")])]),t._v(" "),r("p",[t._v("分治算法能解决的问题，一般需要满足下面这几个条件：")]),t._v(" "),r("ul",[r("li",[t._v("原问题与分解成的小问题具有相同的模式；")]),t._v(" "),r("li",[t._v("原问题分解成的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法跟动态规划的明显区别，等我们讲到动态规划的时候，会详细对比这两种算法；")]),t._v(" "),r("li",[t._v("具有分解终止条件，也就是说，当问题足够小时，可以直接求解；")]),t._v(" "),r("li",[t._v("可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。")])]),t._v(" "),r("h2",{attrs:{id:"回溯算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),r("h3",{attrs:{id:"回溯算法思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法思路"}},[t._v("#")]),t._v(" 回溯算法思路")]),t._v(" "),r("p",[r("strong",[t._v("回溯法")]),t._v(" 采用试错的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("找到一个可能存在的正确的答案；")])]),t._v(" "),r("li",[r("p",[t._v("在尝试了所有可能的分步方法后宣告该问题没有答案。")])])]),t._v(" "),r("p",[r("strong",[t._v("解决一个回溯问题，实际上就是一个决策树的遍历过程")]),t._v("。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("路径")]),t._v("：也就是已经做出的选择。")]),t._v(" "),r("li",[r("strong",[t._v("选择列表")]),t._v("：也就是你当前可以做的选择。")]),t._v(" "),r("li",[r("strong",[t._v("结束条件")]),t._v("：也就是到达决策树底层，无法再做选择的条件。")])]),t._v(" "),r("p",[t._v("回溯算法的骨架：")]),t._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("result = []\ndef backtrack(路径, 选择列表):\n    if 满足结束条件:\n        result.add(路径)\n        return\n\n    for 选择 in 选择列表:\n        做选择\n        backtrack(路径, 选择列表)\n        撤销选择\n")])])]),r("p",[r("strong",[t._v("其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」")])]),t._v(" "),r("h3",{attrs:{id:"回溯算法应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法应用"}},[t._v("#")]),t._v(" 回溯算法应用")]),t._v(" "),r("p",[t._v("回溯算法典型问题：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("46. 全排列（中等）"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("47. 全排列 II（中等）"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"}},[t._v("N 皇后（困难）"),r("OutboundLink")],1)])]),t._v(" "),r("ol",{attrs:{start:"37"}},[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"}},[t._v("解数独（困难）"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/93530380",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎：回溯算法套路详解 - labuladong的文章"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),r("h3",{attrs:{id:"动态规划思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划思路"}},[t._v("#")]),t._v(" 动态规划思路")]),t._v(" "),r("p",[t._v("动态规划比较适合用来求解最优问题，比如求最大值、最小值等等。")]),t._v(" "),r("p",[t._v("动态规划的应用")]),t._v(" "),r("p",[t._v("买卖股票的最佳时机")]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/intro/100017301",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构与算法之美"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("回溯")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/93530380",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎：回溯算法套路详解 - labuladong的文章"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=_.exports}}]);